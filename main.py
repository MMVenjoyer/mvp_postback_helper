from fastapi import FastAPI
from contextlib import asynccontextmanager
import asyncio

from postback_router import router as postback_router
from resolver_router import router as resolver_router
# from keytaro import startup_event, shutdown_event, campaign_router  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
from db import DataBase


# @asynccontextmanager
# async def lifespan(app: FastAPI):
#     """
#     –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#     """
#     # Startup
#     print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

#     # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π
#     asyncio.create_task(startup_event())

#     yield

#     # Shutdown
#     print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
#     await shutdown_event()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title="Deeplink Service + Keitaro Integration",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∑–æ–ª–≤–∞ –¥–∏–ø–ª–∏–Ω–∫–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keitaro",
    version="1.0.0",
    # lifespan=lifespan
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(postback_router, prefix="/postback", tags=["postbacks"])
app.include_router(resolver_router, prefix="/resolve", tags=["resolver"])
# app.include_router(campaign_router, prefix="/api",
#    tags=["campaigns"])  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –∫–∞–º–ø–∞–Ω–∏–π


@app.get("/", tags=["main"])
async def root():
    return {
        "message": "Deeplink Service + Keitaro Integration",
        "features": [
            "–†–µ–∑–æ–ª–≤ UUID –∏–∑ –¥–∏–ø–ª–∏–Ω–∫–æ–≤",
            "–ü–æ—Å—Ç–±—ç–∫–∏ –æ—Ç Keitaro",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–π",
            "–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        ]
    }


@app.get("/health", tags=["main"])
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
    """
    try:
        db = DataBase()
        stats = db.get_detailed_campaign_stats()

        return {
            "status": "healthy",
            "database": "connected",
            "campaign_stats": stats
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e)
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
